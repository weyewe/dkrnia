Order + Item Receival  (linked) 
1. shouldn't receive more than ordered  (DONE) 
2. shouldn't reduce the purchase order quantity if has received more than final ordered quantity
(post confirm)  ( don't allow shite )

3. shouldn only allow uniq item purchase order entry
4. should only allow uniq purchase_order_entry_id in purchase receival   (DONE)


5. must update the pending receival on: 
	post confirm delete/update purchase order entry
	post confirm item receival + post confirm destroy 
	
6. Must update the ready stock on:
	1. post confirm item receival update/delete 

# create stock opname report => list all items + quantity 
# when those 2 are done, do the delivery + create report. 


# ENSURE to update the statistics.


# CORNER CASES: post confirm update, about the stock. What is the policy? 
#	=> StockEntry is useful in tracking the CoGS (cost of goods sold)
#	easy way => just append the usage to the end 
# right way (periodically) => insert it, so that it is sequential. 
	# which means that first_sequence + second_sequence 
	# if the final quantity < initial quantity, the usage will be inserted in between first_sequence and #
	# second sequence. computationally expensive. Recalculate everything. Total CoGS will change 
	# however, the time it takes and number of operation is bad. 
	# THIS IS A FUCKING CORNER CASE. MOST LIKELY WON't happen 
	
	# if we append the usage , so the excess is using the next available stock entry ( not sequential ), 
		# theoritically wrong. However, much simpler. use this one. 
		
		
7. If the stock entry has been used up, and there is source document quantity change. what will happen?

8. However, if the final value is wrong, don't allow. 



# STOCK MUTATION HISTORY is Tough! 

